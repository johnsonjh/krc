    closure' f s t = closure'' f s (mkset {a;f'<-f;a<-map f' t;\member s a})
    closure'' f s t = [], t = []
                    = t ++ closure' f (s ++ t) t
    closure_under_laws f s = s ++ closure' f s s
    equiv a = member (equivclass a)
    equiv2 a = member (closure_under_laws [rotate,swap] [a])
    equivclass x = closure_under_laws [rotate,invert,swap] [x]
    h = "H"
    hh n = {h;i<-[1..n]}
    invert (a:x) = a ++ [x]
    invert x = x
    output = (layn.map rehydrogenate.append.map paraffin) [1..]
    para 0 = [h]
    para n = paralist n
    para' n = {strip [a,b,c];i<-[0..(n-1)/3];j<-[i..(n - 1 - i)/2];a<-para i;b<-para j;c<-para (n - 1 - i - j)}
    paraffin n = quotient equiv {strip [x];x<-para (n - 1)}
    paralist = map (quotient equiv2.para') [1..]
    quotient f (a:x) = a:filter (not.f a) (quotient f x)
    quotient f [] = []
    rehydr x = hh (3 - #x) ++ map rehydr x
    rehydrogenate x = map rehydr x ++ hh (4 - #x)
    rotate (a:x) = x ++ [a]
    rotate "H" = "H"
    strip x = {a<-x;a \= h}
    swap (a:b:x) = b:a:x
    swap x = x
