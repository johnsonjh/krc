    abs x = x, x >= 0

          = -x

    and = fold '&' "TRUE"

    append = fold '++' []

    assoc ([a,b]:x) a' = b, a = a'

                       = assoc x a'

    char :- predicate, true on strings of size one, false

            otherwise (defined in machine code);

    cjustify n x = cjustify' (n - printwidth x) x

    cjustify' n x = [spaces (n / 2),x,spaces ((n + 1) / 2)]

    coalesce :- takes a list of lists and merges them into a single list, by

                repeated use of "interleave" - differs from "append" in that

                it will work even if several of the lists are infinite (indeed

                even if there are an infinite number of infinite lists!);

    coalesce = fold interleave []

    code :- converts a character to its ascii code number

            (defined in machine code);

    compose = fold '.' I

    concat :- takes a list of strings and concatenates them

            into one big string (defined in machine code);

    cons a x = a:x

    decode :- converts an integer to the character of that

              ascii number (defined in machine code);

    digit x = char x & "0" <= x <= "9"

    digitval x = code x - code "0", digit x

    drop 0 x = x

    drop n [] = []

    drop n (a:x) = drop (n - 1) x

    even x = x % 2 = 0

    explode :- explodes a string into a list of its

       constituent characters (defined in machine code);

    false = "FALSE"

    filter f x = {a|a<-x;f a}

    fold op s [] = s

    fold op s (a:x) = op a (fold op s x)

    for a b f = map f [a..b]

    function :- type testing predicate (defined in m/c code);

    hd (a:x) = a

    I x = x

    insert :- auxiliary function used by sort, inserts a

        number into a sorted list in the correct position;

    insert a [] = [a]

    insert a (b:x) = a:b:x, a <= b

                   = b:insert a x

    interleave :- merges two lists into one by taking members from them

                  alternately (- needed by the system to implement multi-

                  generator ZF expressions);

    interleave (a:x) y = a:interleave y x

    interleave [] y = y

    intersection [x] = x

    intersection (x:xx) = filter (member x) (intersection xx)

    lay [] = []

    lay (a:x) = show a:nl:lay x

    layn x = layn' 1 x

    layn' n [] = []

    layn' n (a:x) = rjustify 4 n:")  ":show a:nl:layn' (n + 1) x

    letter x = uppercase x | lowercase x

    limit f x = limit f (f x), f x \= x

              = x

    list :- type testing predicate (defined in machine code);

    listdiff :- defines the action of the "--" operator;

    listdiff [] y = []

    listdiff x [] = x

    listdiff (a:x) (b:y) = listdiff x y, a = b

                         = listdiff (a:listdiff x [b]) y

    ljustify n x = [x,spaces (n - printwidth x)]

    lowercase x = char x & code "a" <= code x <= code "z"

    map f [] = []

    map f (a:x) = f a:map f x

    max [a] = a

    max [a,b] = a, a >= b

              = b

    max (a:x) = max [a,max x]

    member [] a = "FALSE"

    member (a:x) b = a = b | member x b

    min = hd.sort

    mkset x = mkset' x []

    mkset' [] y = []

    mkset' (a:x) y = mkset' x y, member y a

                   = a:mkset' x (a:y)

    neg x = -x

    nl = decode 10

    not x = \x

    np = decode 12

    number :- type testing predicate (defined in machine code);

    odd x = \even x

    or = fold '|' "FALSE"

    perms [] = [[]]

    perms x = {a:p|a<-x;p<-perms (x -- [a])}

    powerset [] = [[]]

    powerset (a:x) = powerset' a (powerset x)

    powerset' a p = p ++ {a:y|y<-p}

    printwidth :- printwidth x, for any x, gives width of x on

          printing (with "!") (defined in machine code);

    product = fold '*' 1

    quote = decode 34

    read :- takes a file or device name and returns a list of 

            characters (defined in machine code);

    reverse [] = []

    reverse (a:x) = reverse x ++ [a]

    rjustify n x = [spaces (n - printwidth x),x]

    show x = "nl", x = nl

           = "np", x = np

           = "tab", x = tab

           = "vt", x = vt

           = [quote,x,quote], string x

           = ["[",show' x,"]"], list x

           = x

    show' [] = []

    show' [a] = [show a]

    show' (a:x) = show a:",":show' x

    sort [] = []

    sort (a:x) = insert a (sort x)

    sp = " "

    spaces 0 = []

    spaces n = " ":spaces (n - 1)

    string :- type testing predicate (defined in machine

                                          code);

    sum = fold '+' 0

    tab = decode 9

    take 0 x = []

    take n [] = []

    take n (a:x) = a:take (n - 1) x

    tl (a:x) = x

    true = "TRUE"

    union = mkset.coalesce

    update f x y z = y, z = x

                   = f z

    uppercase x = char x & code "A" <= code x <= code "Z"

    vt = decode 11

    write :- used to mark items to be sent to a file on

             output, thus:

                 write "filename" x

             where x is any KRC data item.

              (Defined in machine code);

    zip x = [], hd x = []

          = map hd x:zip (map tl x)

